{{ range $stct := .Structs }}
// {{ $stct.Name }} struct declarations
const _{{ $stct.Name }}FieldNameAll = "{{ range $item := $stct.Fields }}{{ $item.CasedName }}{{ end }}"

var _{{ $stct.Name }}FieldNames = []string{
{{- $prevIndex := 0 }}
{{- range $item := $stct.Fields }}
	{{- $currIndex := sumWithLen $prevIndex $item.CasedName }}
	_{{ $stct.Name }}FieldNameAll[{{ $prevIndex }}:{{ $currIndex }}],
	{{- $prevIndex = $currIndex }}
{{- end }}
}

func {{ $stct.Name }}FieldNames() []string {
    temp := make([]string, len(_{{ $stct.Name }}FieldNames))
    copy(temp, _{{ $stct.Name }}FieldNames)
	return temp
}
{{ if eq $stct.GenerateKind "builder" }}
func New{{ $stct.Name }}Builder() *{{ $stct.Name }}Builder {
    return new({{ $stct.Name }}Builder)
}

type {{ $stct.Name }}Builder struct {
    model {{ $stct.Name }}
    appliedFields map[string]struct{}
}

func (b *{{ $stct.Name }}Builder) ensureOnce(fieldName string) {
    if b.appliedFields == nil {
        b.appliedFields = make(map[string]struct{})
    }
    if _, ok := b.appliedFields[fieldName]; ok {
        panic({{ knownAlias "fmt" }}.Sprintf("field \"%s\" is already set", fieldName))
    }
    b.appliedFields[fieldName] = struct{}{}
}
{{ range $i, $item := $stct.Fields }}
func (b *{{ $stct.Name }}Builder) With{{ $item.FieldName }}(value {{ genType $item.TypeInfo }}) *{{ $stct.Name }}Builder {
    b.ensureOnce(_{{ $stct.Name }}FieldNames[{{ $i }}])
    b.model.{{ $item.FieldName }} = value
    return b
}
{{ if $item.TypeInfo.IsArray }}
func (b *{{ $stct.Name }}Builder) Add{{ $item.FieldName }}(values ...{{ genItemType $item.TypeInfo }}) *{{ $stct.Name }}Builder {
    b.model.{{ $item.FieldName }} = append(b.model.{{ $item.FieldName }}, values...)
    return b
}
{{ end }}{{ end }}
func (b *{{ $stct.Name }}Builder) Build() {{ $stct.Name }} {
    return b.model
}
{{ if hasTag $stct.Tags "repo" }}
func (b *{{ $stct.Name }}Builder) getFieldValue(fieldName string) any {
    switch fieldName {
{{- range $i, $item := $stct.Fields }}
    case _{{ $stct.Name }}FieldNames[{{ $i }}]:
        return b.model.{{ $item.FieldName }}
{{- end }}
	}
	panic({{ knownAlias "fmt" }}.Sprintf("unknown field name: %s", fieldName))
}

func (b {{ $stct.Name }}Builder) QueryValues() ([]string, []any) {
    names := make([]string, 0, len(b.appliedFields))
    values := make([]any, 0, len(b.appliedFields))
    for name := range b.appliedFields {
        names = append(names, name)
        values = append(values, b.getFieldValue(name))
    }
    return names, values
}

func New{{ $stct.Name }}Repo(db *{{ knownAlias "sql" }}.DB, table string, formatter {{ knownAlias "sqlen" }}.ParamFormatter) {{ knownAlias "sqlen" }}.Repo[{{ $stct.Name }}, {{ genItemType (index $stct.Fields 0).TypeInfo }}] {
    if db == nil || formatter == nil {
        panic("arguments cannot be nil")
    }
    return &{{ casing $stct.Name "camelCase" }}Repo{
        db: db,
        table: table,
        formatter: formatter,
    }
}

type {{ casing $stct.Name "camelCase" }}Repo struct {
    db *{{ knownAlias "sql" }}.DB
    table string
    fields []string
    formatter {{ knownAlias "sqlen" }}.ParamFormatter
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) DB() *{{ knownAlias "sql" }}.DB {
    return repo.db
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) Table() string {
    return repo.table
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) PK() string {
    return _{{ $stct.Name }}FieldNames[0]
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) Fields() []string {
    return {{ $stct.Name }}FieldNames()
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) Formatter() {{ knownAlias "sqlen" }}.ParamFormatter {
    return repo.formatter
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) Template() (*{{ $stct.Name }}, []any) {
    var val {{ $stct.Name }}
    return &val, []any{ {{- range $i, $item := $stct.Fields -}}
            {{- if ne $i 0 }}, {{ end }}&val.{{ $item.FieldName }}
            {{- end -}} }
}

func (repo *{{ casing $stct.Name "camelCase" }}Repo) Extract(val *{{ $stct.Name }}) []any {
    return []any{ {{- range $i, $item := $stct.Fields -}}
            {{- if ne $i 0 }}, {{ end }}val.{{ $item.FieldName }}
            {{- end -}} }
}
{{- end }}
{{- end }}
{{- /* end builder declaration */ -}}
{{- end }}
