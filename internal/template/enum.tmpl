{{ range $enum := .Enums }}
// {{ $enum.EnumName }} enum declarations
{{ if eq $enum.TypeName "int" }}
{{- /* declarations specific for int valued enums */ -}}
const (
	_{{$enum.EnumName}}NameAll = "{{ range $item := $enum.Values }}{{ if $item }}{{ $item.Value }}{{ end }}{{ end }}"
{{- range $i, $item := $enum.Values }}
{{- if eq $i 0 }}
	{{ $item.Name }} {{ $enum.EnumName }} = {{ if hasTag $enum.Tags "combined" }}1 << {{ end }}iota
{{- else }}
    {{- if $item }}
	{{ $item.Name }}
    {{- else }}
    _
    {{- end }}
{{- end }}
{{- end }}
)

var _{{ $enum.EnumName }}Names = []string{
{{- $prevIndex := 0 }}
{{- range $item := $enum.Values }}{{ if $item }}
	{{- $currIndex := sumWithLen $prevIndex $item.Value }}
	_{{ $enum.EnumName }}NameAll[{{ $prevIndex }}:{{ $currIndex }}],
	{{- $prevIndex = $currIndex }}
{{- end }}{{ end }}
}

var _{{ $enum.EnumName }}Map = map[string]{{ $enum.EnumName }}{
{{- $prevIndex := 0 }}
{{- range $item := $enum.Values }}{{ if $item }}
	{{- $currIndex := sumWithLen $prevIndex $item.Value }}
	_{{ $enum.EnumName }}NameAll[{{ $prevIndex }}:{{ $currIndex }}]: {{ $item.Name }},
	{{- $prevIndex = $currIndex }}
{{- end }}{{ end }}
}

func {{ $enum.EnumName }}Names() []string {
    temp := make([]string, len(_{{ $enum.EnumName }}Names))
    copy(temp, _{{ $enum.EnumName }}Names)
	return temp
}

func {{ $enum.EnumName }}FromString(value string) ({{ $enum.EnumName }}, bool) {
	enum, has := _{{ $enum.EnumName }}Map[value]
	return enum, has
}
{{ if hasTag $enum.Tags "combined" }}
func (gr {{ $enum.EnumName }}) Has(en {{ $enum.EnumName }}) bool {
	return (gr & en) != 0
}
{{ end }}
func (en {{ $enum.EnumName }}) String() string {
	return _{{ $enum.EnumName }}Names[en]
}

{{- else if eq $enum.TypeName "string" -}}
{{- /* declarations specific for string valued enums */ -}}
const (
{{- range $i, $item := $enum.Values }}
	{{ $item.Name }} {{ $enum.EnumName }} = "{{ $item.Value }}"
{{- end }}
)

func (en {{ $enum.EnumName }}) String() string {
	return string(en)
}
{{- end }}

func {{ $enum.EnumName }}Values() []{{ $enum.EnumName }} {
	return []{{ $enum.EnumName }}{
	{{- range $item := $enum.Values }}{{ if $item }}
		{{ $item.Name }},
	{{- end }}{{ end }}
	}
}

func (en {{ $enum.EnumName }}) IsValid() bool {
	{{- range $i, $item := $enum.Values -}}{{ if $item }}{{ if eq $i 0 }}
	return en == {{ $item.Name }}{{ else }} ||
		en == {{ $item.Name }}
	{{- end }}{{ end }}{{ end }}
}

{{ end -}}
